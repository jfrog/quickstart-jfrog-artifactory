AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys the EC2 Autoscaling, LaunchConfig, ECS Cluster, and calls nested Stack for the ECS Service"
Parameters:
  PrivateSubnet1Id:
    Type: 'AWS::EC2::Subnet::Id'
  PrivateSubnet2Id:
    Type: 'AWS::EC2::Subnet::Id'
  MinScalingNodes:
    Type: Number
  MaxScalingNodes:
    Type: Number
  InstanceType:
    Type: String
  VolumeSize:
    Type: Number
  ClusterName:
    Description: Desired name for your cluster.
    Default: JFrog
    Type: String
  CreateNewEcsCluster:
    Description: Whether to create the ECS Cluster with given name or not.
    Default: Enabled
    Type: String
  DeploymentTag:
    Type: String
  JcrServerName:
    Type: String
  Certificate:
    Type: String
  CertificateKey:
    Type: String
    NoEcho: 'true'
  CertificateDomain:
    Type: String
  JcrIamAcessKey:
    Type: String
    NoEcho: 'true'
  SecretAccessKey:
    Type: String
    NoEcho: 'true'
  JcrS3Bucket:
    Type: String
  DbUrl:
    Type: String
  DbDriver:
    Type: String
  DbPlugin:
    Type: String
  DbPluginUrl:
    Type: String
  ProDockerRepo:
    Type: String
  NginxDockerRepo:
    Type: String
  DbType:
    Type: String
  DatabaseUser:
    Type: String
  DatabasePassword:
    NoEcho: 'true'
    Type: String
  MasterKey:
    Type: String
    NoEcho: 'true'
  ExtraJavaOptions:
    Type: String
  JcrVersion:
    Type: String
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  JcrTargetGroupArn:
    Type: String
  SecurityGroups:
    Type: String
  AnsibleVaultPass:
    Description: Ansiblevault Password to secure the artifactory.yml
    NoEcho: 'true'
    Type: String
  QsS3BucketName:
    Type: String
  QsS3KeyPrefix:
    Type: String
Mappings:
  AWSAMIRegionMap:
    us-east-2:
      AMZNLINUXHVM: ami-025e529ec693faba6
    us-east-1:
      AMZNLINUXHVM: ami-0f81924348bcd01a1
    us-west-2:
      AMZNLINUXHVM: ami-01262e56d9a240227
    us-west-1:
      AMZNLINUXHVM: ami-0c4f775d282076047
    eu-west-3:
      AMZNLINUXHVM: ami-00c2374f0b16417ab
    eu-west-2:
      AMZNLINUXHVM: ami-037af9c254c6dc46c
    eu-west-1:
      AMZNLINUXHVM: ami-04c29bb1e9988c803
    eu-central-1:
      AMZNLINUXHVM: ami-02171c9c6dfc9dd1a
    eu-north-1:
      AMZNLINUXHVM: ami-0eb986243d67b81fc
    ap-northeast-2:
      AMZNLINUXHVM: ami-0bd857d087df070e6
    ap-northeast-1:
      AMZNLINUXHVM: ami-0633805928291a0db
    ap-southeast-2:
      AMZNLINUXHVM: ami-02a1d998121cea625
    ap-southeast-1:
      AMZNLINUXHVM: ami-0dfacf29e68ba0347
    ca-central-1:
      AMZNLINUXHVM: ami-06a21d76fa509c0e8
    ap-south-1:
      AMZNLINUXHVM: ami-005136f1190a5c6b7
    sa-east-1:
      AMZNLINUXHVM: ami-0c16a6e54a2f933f0
Conditions:
  CreateEcsCluster: !Equals [!Ref 'CreateNewEcsCluster', 'Enabled']
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
Resources:
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub
        ${ClusterName}-ECSRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - ec2.amazonaws.com
                - ecs.amazonaws.com
            Effect: Allow
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:ListClusters
                  - ecs:ListServices
                  - ecs:DescribeServices
                  - ecr:ListImages
                  - ecs:RegisterTaskDefinition
                  - ecs:CreateService
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                  - ecs:CreateService
                  - ecs:DeleteService
                  - ecs:UpdateService
                  - ecs:DescribeContainerInstances
                  - ecs:DescribeTaskDefinition
                  - application-autoscaling:DescribeScalableTargets
                  - iam:ListRoles
                Resource: "*"

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  EcsCluster:
    Condition: CreateEcsCluster
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  JcrScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: JcrEcsEC2ScaleGroup
      LaunchConfigurationName: !Ref JcrLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1Id
        - !Ref PrivateSubnet2Id
      MinSize: !Ref MinScalingNodes
      MaxSize: !Ref MaxScalingNodes
      Cooldown: '300'
      DesiredCapacity: !Ref MinScalingNodes
      HealthCheckType: EC2
      HealthCheckGracePeriod: 600
      Tags:
        - Key: Name
          Value: !Ref DeploymentTag
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M

  JcrLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName:
            - !Ref ECSRole
          buckets:
            - !Ref QsS3BucketName
      'AWS::CloudFormation::Init':
        configSets:
          artifactory_install:
            - "config-artifactory-master"
            - "secure-artifactory"
        config-artifactory-master:
          files:
            /root/.artifactory_ansible/artifactory.yml:
              content: !Sub |
                # Base install for Jcr
                - import_playbook: site-jcr.yml
                  vars:
                    ecs_deployment: true
                    jcr_version: ${JcrVersion}
                    jcr_hostname: artifactory
                    ssl_dir: /data/jfrog/nginx/ssl/
                    key_dir: /data/jfrog/nginx/ssl/
                    s3_region: ${AWS::Region}
                    s3_access_key: ${JcrIamAcessKey}
                    s3_access_secret_key: ${SecretAccessKey}
                    s3_bucket: ${JcrS3Bucket}
                    jcr_server_name: ${JcrServerName}
                    certificate: ${Certificate}
                    certificate_key: ${CertificateKey}
                    certificate_domain: ${CertificateDomain}
              mode: "0400"
            /root/.vault_pass.txt:
              content: !Sub |
                ${AnsibleVaultPass}
              mode: "0400"
            /root/.secureit.sh:
              content: ansible-vault encrypt /root/.artifactory_ansible/artifactory.yml --vault-id /root/.vault_pass.txt
              mode: "0770"
        secure-artifactory:
          commands:
            'secure ansible playbook':
              command: '/root/.secureit.sh'
              ignoreErrors: 'false'
    Properties:
      AssociatePublicIpAddress: false
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EcsInstanceProfile
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - AMZNLINUXHVM
      SecurityGroups:
        - !Ref SecurityGroups
      InstanceType: !Ref InstanceType
      LaunchConfigurationName: JcrEcsEC2LaunchConfig
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData: !Base64
        'Fn::Sub':
          - >
            #!/bin/bash -x

            #CFN Functions

            function cfn_fail

            {

            cfn-signal -e 1 --stack ${AWS::StackName} --region ${AWS::Region}
            --resource JcrScalingGroup

            exit 1

            }

            function cfn_success

            {

            cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region}
            --resource JcrScalingGroup

            exit 0

            }

            echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config

            S3URI=https://${QsS3BucketName}.${S3Region}.amazonaws.com/${QsS3KeyPrefix}

            yum install -y git https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm python3-pip

            echo $PATH

            PATH=/usr/local/bin/:/opt/aws/bin:$PATH

            echo $PATH
            echo \'[Cloning: Load QuickStart Common Utils]\'

            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git

            source /quickstart-linux-utilities/quickstart-cfn-tools.source

            echo \'[Loaded: Load QuickStart Common Utils]\'

            echo \'[Update Operating System]\'

            qs_update-os || qs_err

            qs_bootstrap_pip || qs_err

            pip install awscli &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "

            pip install ansible &> /var/log/userdata.ansible_install.log || qs_err " ansible install failed "

            pip install selinux &> /var/log/userdata.selinux_install.log || qs_err " selinux install failed "

            pip install aws-cfn-bootstrap &> /var/log/userdata.cfn_bootstrap_install.log || qs_err " cfn_bootstrap install failed "

            mkdir ~/.artifactory_ansible

            aws s3 sync s3://${QsS3BucketName}/${QsS3KeyPrefix}scripts/ ~/.artifactory_ansible/

            cfn-init -v --stack ${AWS::StackName} --resource
            JcrLaunchConfiguration --configsets artifactory_install
            --region ${AWS::Region} || cfn_fail

            export ANSIBLE_VAULT_PASSWORD_FILE="/root/.vault_pass.txt"

            ansible-playbook /root/.artifactory_ansible/artifactory.yml || qs_err "Ansible execution failed "

            rm -rf /root/.secureit.sh

            [ $(qs_status) == 0 ] && cfn_success || cfn_fail
          - S3Region: !If
              - GovCloudCondition
              - s3-us-gov-west-1
              - s3

  EcsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  JcrStack:
    DependsOn: JcrScalingGroup
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${QsS3BucketName}.s3.amazonaws.com/${QsS3KeyPrefix}templates/jfrog-container-registry-ecs.template.yaml'
      Parameters:
        EcsCluster: !Ref ClusterName # In case we do not build the cluster we still require the Name of the cluster built.
        ServiceName: Jfrog-Container-Registry
        JcrTargetGroupArn: !Ref JcrTargetGroupArn
        DbPlugin: !Ref DbPlugin
        DbPluginUrl: !Ref DbPluginUrl
        MasterKey: !Ref MasterKey
        ExtraJavaOptions: !Ref ExtraJavaOptions
        NumberNodes: "1"
        DbUrl: !Ref DbUrl
        DbDriver: !Ref DbDriver
        ProDockerRepoUrl: !Sub "${ProDockerRepo}:${JcrVersion}"
        NginxDockerRepoUrl: !Sub "${NginxDockerRepo}:${JcrVersion}"
        DbType: !Ref DbType
        DatabaseUser: !Ref DatabaseUser
        DatabasePassword: !Ref DatabasePassword
        EcsLogGroup: !Ref EcsLogGroup
        EcsRoleArn:
          Fn::GetAtt: ECSRole.Arn
        QsS3BucketName: !Ref QsS3BucketName
        QsS3KeyPrefix: !Ref QsS3KeyPrefix
