AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys JCR into an existing Kubernetes cluster"
Parameters:
  KubeManifestLambdaArn:
    Type: String
  HelmLambdaArn:
    Type: String
  KubeConfigPath:
    Type: String
  KubeConfigKmsContext:
    Type: String
  KubeGetLambdaArn:
    Type: String
  NumberOfNodes:
    Type: Number
  AccessCIDR:
    Type: String
  JCRIAMAcessKey:
    Type: String
    NoEcho: 'true'
  SecretAccessKey:
    Type: String
    NoEcho: 'true'
  JCRS3Bucket:
    Type: String
  CertificateKey:
    Type: String
    NoEcho: 'true'
  Certificate:
    Type: String
  DatabaseUser:
    Type: String
    NoEcho: 'true'
  DatabasePassword:
    Type: String
    NoEcho: 'true'
  DBURL:
    Type: String
  DBDriver:
    Type: String
  DBPluginURL:
    Type: String
  DBPlugin:
    Type: String
  DBType:
    Type: String
  MasterKey:
    Type: String
    NoEcho: 'true'
  JCRVersion:
    Type: String
  ProDockerRepo:
    Type: String
  NginxDockerRepo:
    Type: String
  JCRDeploymentSize:
    Type: String
  ReleaseStage:
    Type: String
    Default: BETA
Mappings:
  HelmRepoMap:
    BETA:
      RepoUrl: https://earlyaccess.jfrog.io/artifactory/helm/
      HelmChartVersion: 9.0.9
    GA:
      RepoUrl: https://charts.jfrog.io/
      HelmChartVersion: 1.1.1
  DeploymentSize:
    Large:
      requestsMem: "6Gi"
      requestsCpu: "4"
      limitsMem: "10Gi"
      limitsCpu: "8"
      javaOptsXms: "6g"
      javaOptsXmx: "8g"
    Medium:
      requestsMem: "4Gi"
      requestsCpu: "2"
      limitsMem: "8Gi"
      limitsCpu: "6"
      javaOptsXms: "4g"
      javaOptsXmx: "6g"
    Small:
      requestsMem: "4Gi"
      requestsCpu: "2"
      limitsMem: "6Gi"
      limitsCpu: "4"
      javaOptsXms: "4g"
      javaOptsXmx: "4g"

Resources:
  NameSpace:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Manifest:
        kind: Namespace
        apiVersion: v1
        metadata:
          name: jfrog-artifactory-jcr
          labels:
            app: artifactory-jcr

  CertificateStore:
    DependsOn: NameSpace
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Manifest:
        kind: Secret
        apiVersion: v1
        metadata:
          name: artifactory-jcr-nginx-tls
          namespace: jfrog-artifactory-jcr
          labels:
            app: artifactory-jcr
            chart: artifactory-jcr
        type: kubernetes.io/tls
        data:
          tls.crt:
            Fn::Base64:
              !Join ["\n", "Fn::Split": ["|", !Ref Certificate]]
          tls.key:
            Fn::Base64:
              !Join ["\n", "Fn::Split": ["|", !Ref CertificateKey]]

  SecureStoreDB:
    DependsOn: NameSpace
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Manifest:
        kind: Secret
        apiVersion: v1
        metadata:
          name: artifactory-jcr-cluster-db
          namespace: jfrog-artifactory-jcr
          labels:
            app: artifactory-jcr
            chart: artifactory-jcr
        type: Opaque
        data:
          db-user:
            Fn::Base64:
              !Sub ${DatabaseUser}
          db-password:
            Fn::Base64:
              !Sub ${DatabasePassword}
          db-url:
            Fn::Base64:
              !Sub ${DBURL}

  JCRDeployment:
    Type: "Custom::Helm"
    DependsOn:
      - CertificateStore
    Version: '1.0'
    Properties:
      ServiceToken: !Ref HelmLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Namespace: jfrog-artifactory-jcr
      Name: quickstart-artifactory-jcr
      Chart: jfrog/artifactory
      #Chart: jfrog/artifactory-jcr
      RepoUrl: !FindInMap [HelmRepoMap, !Ref ReleaseStage, RepoUrl]
      Version: !FindInMap [HelmRepoMap, !Ref ReleaseStage, HelmChartVersion]
      ValueYaml: !Sub
        - |
          #artifactory:
          artifactory:
            name: artifactory-jcr
            image:
              repository: ${ProDockerRepo}
              version: ${JCRVersion}
              pullPolicy: Always
            deleteDBPropertiesOnStartup: true
            masterKey: ${MasterKey}
            preStartCommand: "mkdir -p /var/opt/jfrog/artifactory/bootstrap/artifactory/tomcat/lib/; wget -O  /var/opt/jfrog/artifactory/bootstrap/artifactory/tomcat/lib/${DBPlugin} ${DBPluginURL}"
            persistence:
              enabled: false
              type: aws-s3
              awsS3:
                endpoint: s3.${AWS::Region}.amazonaws.com
                region: ${AWS::Region}
                identity: ${JCRIAMAcessKey}
                credential: ${SecretAccessKey}
                bucketName: ${JCRS3Bucket}
            resources:
              requests:
                memory: "${requests_memory}"
                cpu: "${requests_cpu}"
              limits:
                memory: "${limits_memory}"
                cpu: "${limits_cpu}"
            javaOpts:
              xms: "${java_xms}"
              xmx: "${java_xmx}"
            nodeSelector:
              partition: production
          postgresql:
            enabled: false
          database:
            type: ${DBType}
            driver: ${DBDriver}
            secrets:
              user:
                name: artifactory-jcr-cluster-db
                key: "db-user"
              password:
                name: artifactory-jcr-cluster-db
                key: "db-password"
              url:
                name: artifactory-jcr-cluster-db
                key: "db-url"
          nginx:
            enabled: true
            image:
              repository: ${NginxDockerRepo}
              #version: ${JCRVersion}
            replicaCount: ${NumberOfNodes}
            service:
              loadBalancerSourceRanges:  [ "${AccessCIDR}" ]
            tlsSecretName: artifactory-jcr-nginx-tls
        - {
           requests_memory: !FindInMap [DeploymentSize, !Ref JCRDeploymentSize, requestsMem],
           requests_cpu: !FindInMap [DeploymentSize, !Ref JCRDeploymentSize, requestsCpu],
           limits_memory: !FindInMap [DeploymentSize, !Ref JCRDeploymentSize, limitsMem],
           limits_cpu: !FindInMap [DeploymentSize, !Ref JCRDeploymentSize, limitsCpu],
           java_xms: !FindInMap [DeploymentSize, !Ref JCRDeploymentSize, javaOptsXms],
           java_xmx: !FindInMap [DeploymentSize, !Ref JCRDeploymentSize, javaOptsXmx],
          }
  IngressHostName:
    DependsOn: JCRDeployment
    Type: "Custom::KubeGet"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeGetLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Namespace: jfrog-artifactory-jcr
      Name: svc/quickstart-artifactory-jcr-artifactory-nginx
      JsonPath: '{.status.loadBalancer.ingress[0].hostname}'
Outputs:
  JCRUrl:
    Value: !Sub https://${IngressHostName}
