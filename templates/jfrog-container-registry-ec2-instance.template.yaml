AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys the EC2 Autoscaling, LaunchConfig and Instance for JFrog Container Registry"
Parameters:
  PrivateSubnet1Id:
    Type: 'AWS::EC2::Subnet::Id'
  PrivateSubnet2Id:
    Type: 'AWS::EC2::Subnet::Id'
  MinScalingNodes:
    Type: Number
  MaxScalingNodes:
    Type: Number
  DeploymentTag:
    Type: String
  HostRole:
    Type: String
  AmiId:
    Type: String
  QsS3BucketName:
    Type: String
  QsS3KeyPrefix:
    Type: String
  JcrServerName:
    Type: String
  Certificate:
    Type: String
  CertificateKey:
    Type: String
    NoEcho: 'true'
  CertificateDomain:
    Type: String
  JcrIamAcessKey:
    Type: String
    NoEcho: 'true'
  SecretAccessKey:
    Type: String
    NoEcho: 'true'
  JcrS3Bucket:
    Type: String
  DatabaseUrl:
    Type: String
  DatabaseDriver:
    Type: String
  DatabasePluginUrl:
    Type: String
  DatabasePlugin:
    Type: String
  DatabaseType:
    Type: String
  DatabaseUser:
    Type: String
  DatabasePassword:
    Type: String
    NoEcho: 'true'
  ExtraJavaOptions:
    Type: String
  MasterKey:
    Type: String
    NoEcho: 'true'
  JcrVersion:
    Type: String
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
  TargetGroupARN:
    Type: String
  SSLTargetGroupARN:
    Type: String
  HostProfile:
    Type: String
  SecurityGroups:
    Type: String
  InstanceType:
    Type: String
  VolumeSize:
    Type: Number
  KeystorePassword:
    Description: Default Keystore from Java in which we upgrade.
    Type: String
    NoEcho: 'true'
  AnsibleVaultPass:
    Description: Ansiblevault Password to secure the jcr.yml
    Type: String
    NoEcho: 'true'
# To populate additional mappings use the following with the desired --region
# aws --region us-west-2 ec2 describe-images --owners amazon --filters 'Name=name,Values=amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2' 'Name=state,Values=available' --output json | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId'
Mappings:
  AWSAMIRegionMap:
    AMI:
      AMZNLINUXHVM: amzn-ami-hvm-2018.03.0.20181129-x86_64-gp2
    ap-northeast-1:
      AMZNLINUXHVM: ami-079e6fb1e856e80c1
    ap-northeast-2:
      AMZNLINUXHVM: ami-0e4a253fb5f082688
    ap-south-1:
      AMZNLINUXHVM: ami-01e074f40dfb9999d
    ap-southeast-1:
      AMZNLINUXHVM: ami-0d9233e8ce73df7b2
    ap-southeast-2:
      AMZNLINUXHVM: ami-0c91f97cadcc8499e
    ca-central-1:
      AMZNLINUXHVM: ami-003a0ba7ea76b2785
    eu-central-1:
      AMZNLINUXHVM: ami-0ab838eeee7f316eb
    eu-west-1:
      AMZNLINUXHVM: ami-071f4ce599deff521
    sa-east-1:
      AMZNLINUXHVM: ami-04b202bf877b5027b
    us-east-1:
      "720": ami-05aa02eddf5f692b7
    us-east-2:
      AMZNLINUXHVM: ami-0d542ef84ec55d71c
    us-west-1:
      AMZNLINUXHVM: ami-04bc3da8f14823e88
    us-west-2:
      "710": ami-07f039f47eaf2a134
      "720": ami-00e553f639e682cb8
Conditions:
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
Resources:
  JcrScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref JcrLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1Id
        - !Ref PrivateSubnet2Id
      MinSize: !Ref MinScalingNodes
      MaxSize: !Ref MaxScalingNodes
      Cooldown: '300'
      DesiredCapacity: !Ref MinScalingNodes
      TargetGroupARNs:
        - !Ref TargetGroupARN
        - !Ref SSLTargetGroupARN
      HealthCheckType: ELB
      HealthCheckGracePeriod: 600
      Tags:
        - Key: Name
          Value: !Ref DeploymentTag
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M

  JcrLaunchConfiguration:
      Type: 'AWS::AutoScaling::LaunchConfiguration'
      Metadata:
        'AWS::CloudFormation::Authentication':
          S3AccessCreds:
            type: S3
            roleName:
              - !Ref HostRole
            buckets:
              - !Ref QsS3BucketName
        'AWS::CloudFormation::Init':
          configSets:
            jcr_install:
              - "config-jcr-master"
              - "secure-jcr"
          config-jcr-master:
            files:
              /root/.jcr_ansible/jcr.yml:
                content: !Sub |
                    # Base install for JCR
                    - import_playbook: site-jcr.yml
                      vars:
                        jcr_server_name: ${JcrServerName}
                        s3_region: ${AWS::Region}
                        s3_access_key: ${JcrIamAcessKey}
                        s3_access_secret_key: ${SecretAccessKey}
                        s3_bucket: ${JcrS3Bucket}
                        certificate: ${Certificate}
                        certificate_key: ${CertificateKey}
                        certificate_domain: ${CertificateDomain}
                        ssl_dir: /etc/pki/tls/certs
                        db_type: ${DatabaseType}
                        db_driver: ${DatabaseDriver}
                        db_url: ${DatabaseUrl}
                        db_user: ${DatabaseUser}
                        db_password: ${DatabasePassword}
                        extra_java_opts: ${ExtraJavaOptions}
                        jcr_master_key: ${MasterKey}
                        jcr_version: ${JcrVersion}
                        jcr_keystore:
                          path: /opt/jfrog/artifactory/app/third-party/java/lib/security/cacerts
                          default_password: changeit
                          new_keystore_pass: ${KeystorePassword}
                        jcr_java_db_drivers:
                          - name: ${DatabasePlugin}
                            url: ${DatabasePluginUrl}
                            owner: artifactory
                            group: artifactory
                mode: "0400"
              /root/.vault_pass.txt:
                content: !Sub |
                  ${AnsibleVaultPass}
                mode: "0400"
              /root/.secureit.sh:
                content:
                  ansible-vault encrypt /root/.jcr_ansible/jcr.yml --vault-id /root/.vault_pass.txt
                mode: "0770"
          secure-jcr:
            commands:
              'secure ansible playbook':
                command: '/root/.secureit.sh'
                ignoreErrors: 'false'
      Properties:
        AssociatePublicIpAddress: false
        KeyName: !Ref KeyPairName
        IamInstanceProfile: !Ref HostProfile
        ImageId: !FindInMap
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - !Ref AmiId
        SecurityGroups:
          - !Ref SecurityGroups
        InstanceType: !Ref InstanceType
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref VolumeSize
              VolumeType: gp2
              DeleteOnTermination: true
        UserData: !Base64
          'Fn::Sub':
            - >
              #!/bin/bash -x

              #CFN Functions

              function cfn_fail

              {

              cfn-signal -e 1 --stack ${AWS::StackName} --region ${AWS::Region}
              --resource JcrScalingGroup

              exit 1

              }

              function cfn_success

              {

              cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region}
              --resource JcrScalingGroup

              exit 0

              }

              S3URI=https://${QsS3BucketName}.${S3Region}.amazonaws.com/${QsS3KeyPrefix}

              yum install -y git

              echo $PATH

              PATH=/opt/aws/bin:$PATH

              echo $PATH
              echo \'[Cloning: Load QuickStart Common Utils]\'

              git clone
              https://github.com/aws-quickstart/quickstart-linux-utilities.git

              source /quickstart-linux-utilities/quickstart-cfn-tools.source

              echo \'[Loaded: Load QuickStart Common Utils]\'

              echo \'[Update Operating System]\'

              qs_update-os || qs_err

              qs_bootstrap_pip || qs_err

              qs_aws-cfn-bootstrap || qs_err

              source ~/venv/bin/activate &> /var/log/userdata.activate_venv.log || qs_err " activate venv failed "

              #pip install awscli &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "

              #pip install ansible &> /var/log/userdata.ansible_install.log || qs_err " ansible install failed "

              mkdir ~/.jcr_ansible

              aws s3 sync s3://${QsS3BucketName}/${QsS3KeyPrefix}scripts/ ~/.jcr_ansible/

              cfn-init -v --stack ${AWS::StackName} --resource
              JcrLaunchConfiguration --configsets jcr_install
              --region ${AWS::Region} || cfn_fail

              export ANSIBLE_VAULT_PASSWORD_FILE="/root/.vault_pass.txt"

              ansible-playbook /root/.jcr_ansible/jcr.yml || qs_err " ansible execution failed "

              rm -rf /root/.secureit.sh

              [ $(qs_status) == 0 ] && cfn_success || cfn_fail
            - S3Region: !If
              - GovCloudCondition
              - s3-us-gov-west-1
              - s3